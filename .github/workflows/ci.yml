name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  SECURITY_LEVEL: 'maximum'

jobs:
  # Security and Code Quality Analysis
  security-scan:
    name: üîí Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test]
      
      - name: Run Bandit security linter
        run: |
          bandit -r pyidverify/ -f json -o bandit-report.json || true
          bandit -r pyidverify/ -f txt
        continue-on-error: true
      
      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-report.json
        continue-on-error: true
      
      - name: Run Safety vulnerability scan
        run: |
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true
      
      - name: Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/owasp-top-ten
        continue-on-error: true
      
      - name: Upload security artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Code Quality and Linting
  code-quality:
    name: üßπ Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test]
      
      - name: Check code formatting with Black
        run: black --check --diff pyidverify/ tests/
      
      - name: Check import sorting with isort
        run: isort --check-only --diff pyidverify/ tests/
      
      - name: Lint with flake8
        run: flake8 pyidverify/ tests/
      
      - name: Type checking with mypy
        run: mypy pyidverify/
      
      - name: Check docstring coverage
        run: |
          pip install docstring-coverage
          docstring-coverage pyidverify/ --badge=coverage.svg
      
      - name: Upload coverage badge
        uses: actions/upload-artifact@v3
        with:
          name: coverage-badge
          path: coverage.svg

  # Unit and Integration Tests
  test:
    name: üß™ Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        include:
          # Test with Redis for caching tests
          - os: ubuntu-latest
            python-version: '3.11'
            redis: true
    
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libffi-dev libssl-dev
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test,all]
      
      - name: Set up test environment
        run: |
          export PYIDVERIFY_SECURITY_LEVEL=testing
          export PYIDVERIFY_TEST_MODE=true
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=pyidverify --cov-report=xml --cov-report=html
      
      - name: Run integration tests
        if: matrix.python-version == '3.11'
        run: |
          pytest tests/integration/ -v --cov-append --cov=pyidverify
      
      - name: Run security tests
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        run: |
          pytest tests/security/ -v -m security
      
      - name: Run performance tests
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        run: |
          pytest tests/performance/ -v -m performance --benchmark-only
      
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # Documentation Build and Validation
  documentation:
    name: üìö Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,docs]
      
      - name: Build documentation
        run: |
          cd docs
          make html SPHINXOPTS="-W --keep-going"
      
      - name: Check documentation links
        run: |
          cd docs
          make linkcheck
      
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  # Compliance and Regulatory Testing
  compliance:
    name: ‚öñÔ∏è Compliance Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test,compliance]
      
      - name: GDPR compliance tests
        run: |
          pytest tests/compliance/test_gdpr.py -v
      
      - name: HIPAA compliance tests
        run: |
          pytest tests/compliance/test_hipaa.py -v
      
      - name: PCI DSS compliance tests
        run: |
          pytest tests/compliance/test_pci_dss.py -v
      
      - name: Generate compliance report
        run: |
          python scripts/generate_compliance_report.py
      
      - name: Upload compliance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compliance-reports
          path: reports/compliance/

  # Container Security Scanning
  container-security:
    name: üê≥ Container Security
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t pyidverify:${{ github.sha }} .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pyidverify:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: pyidverify:${{ github.sha }}
          args: --severity-threshold=high
        continue-on-error: true

  # Build and Package
  build:
    name: üì¶ Build Package
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test, documentation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check package
        run: |
          twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # Release and Deploy
  release:
    name: üöÄ Release
    runs-on: ubuntu-latest
    needs: [build, compliance, container-security]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            CHANGELOG.md
          generate_release_notes: true
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Publish to Test PyPI
        if: contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          username: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      
      - name: Publish to PyPI
        if: ${{ !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          username: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Security Monitoring and Alerts
  security-monitoring:
    name: üõ°Ô∏è Security Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,security]
      
      - name: Check for new vulnerabilities
        run: |
          safety check --full-report --json --output vulnerability-report.json
          pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true
      
      - name: Monitor dependency changes
        run: |
          python scripts/monitor_dependencies.py
      
      - name: Generate security dashboard
        run: |
          python scripts/security_dashboard.py
      
      - name: Send security alerts
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Security vulnerability detected in PyIDVerify repository'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Benchmarking
  benchmark:
    name: ‚ö° Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test,benchmark]
      
      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ --benchmark-json=benchmark-results.json
      
      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Python Benchmark
          tool: 'pytest'
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
      
      - name: Upload benchmark artifacts
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json
