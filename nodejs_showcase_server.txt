"""
PyIDVerify Email Verification - Node.js Web Server Showcase
==========================================================

This document provides a complete Node.js web server implementation that showcases
all components of the PyIDVerify Enhanced Email Verification system.

The server provides a web interface and API endpoints to demonstrate:
- All verification modes (Basic, Standard, Thorough, Comprehensive, Behavioral)
- Individual component testing (DNS, SMTP, API, Hybrid)
- Real-time email validation with visual feedback
- Performance benchmarking
- Interactive configuration
"""

# Node.js Server Implementation
NODE_JS_SERVER = """
/*
PyIDVerify Email Verification Showcase Server
=============================================

A complete Node.js Express server that demonstrates all email verification capabilities
through a web interface and REST API.

Installation & Setup:
npm init -y
npm install express cors body-parser multer python-shell socket.io
npm install --save-dev nodemon

Start server: npm run dev
Access at: http://localhost:3000
*/

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');
const { PythonShell } = require('python-shell');
const http = require('http');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));
app.use(express.static(path.join(__dirname, 'public')));

// Python script paths (adjust to your PyIDVerify installation)
const PYTHON_PATH = 'python';
const PYIDVERIFY_PATH = path.join(__dirname, 'python_integration');

// =============================================================================
// API ROUTES
// =============================================================================

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    service: 'PyIDVerify Email Verification Showcase',
    version: '1.0.0'
  });
});

// Basic email validation
app.post('/api/validate/basic', async (req, res) => {
  try {
    const { email } = req.body;
    
    const result = await runPythonScript('basic_validation.py', [email]);
    
    res.json({
      success: true,
      mode: 'basic',
      email: email,
      result: result,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      mode: 'basic'
    });
  }
});

// Standard email validation (with DNS)
app.post('/api/validate/standard', async (req, res) => {
  try {
    const { email } = req.body;
    
    const result = await runPythonScript('standard_validation.py', [email]);
    
    res.json({
      success: true,
      mode: 'standard',
      email: email,
      result: result,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      mode: 'standard'
    });
  }
});

// Thorough email validation (with SMTP/API)
app.post('/api/validate/thorough', async (req, res) => {
  try {
    const { email, apiKey = null, provider = 'zerobounce' } = req.body;
    
    const args = [email];
    if (apiKey) {
      args.push('--api-key', apiKey);
      args.push('--provider', provider);
    }
    
    const result = await runPythonScript('thorough_validation.py', args);
    
    res.json({
      success: true,
      mode: 'thorough',
      email: email,
      result: result,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      mode: 'thorough'
    });
  }
});

// Comprehensive hybrid validation
app.post('/api/validate/comprehensive', async (req, res) => {
  try {
    const { 
      email, 
      strategy = 'balanced',
      apiKey = null,
      provider = 'zerobounce'
    } = req.body;
    
    const args = [email, '--strategy', strategy];
    if (apiKey) {
      args.push('--api-key', apiKey);
      args.push('--provider', provider);
    }
    
    const result = await runPythonScript('comprehensive_validation.py', args);
    
    res.json({
      success: true,
      mode: 'comprehensive',
      email: email,
      result: result,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      mode: 'comprehensive'
    });
  }
});

// Behavioral verification workflow
app.post('/api/validate/behavioral', async (req, res) => {
  try {
    const { 
      email, 
      workflowType = 'email_confirmation',
      smtpConfig = null
    } = req.body;
    
    const args = [email, '--workflow', workflowType];
    if (smtpConfig) {
      args.push('--smtp-config', JSON.stringify(smtpConfig));
    }
    
    const result = await runPythonScript('behavioral_validation.py', args);
    
    res.json({
      success: true,
      mode: 'behavioral',
      email: email,
      result: result,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      mode: 'behavioral'
    });
  }
});

// Batch email validation
app.post('/api/validate/batch', async (req, res) => {
  try {
    const { emails, mode = 'standard', maxConcurrent = 5 } = req.body;
    
    if (!Array.isArray(emails) || emails.length === 0) {
      return res.status(400).json({
        success: false,
        error: 'emails must be a non-empty array'
      });
    }
    
    if (emails.length > 100) {
      return res.status(400).json({
        success: false,
        error: 'Maximum 100 emails per batch'
      });
    }
    
    const results = await runPythonScript('batch_validation.py', [
      JSON.stringify(emails),
      '--mode', mode,
      '--max-concurrent', maxConcurrent.toString()
    ]);
    
    res.json({
      success: true,
      mode: 'batch',
      emailCount: emails.length,
      results: results,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      mode: 'batch'
    });
  }
});

// Component testing endpoints
app.post('/api/test/dns', async (req, res) => {
  try {
    const { domain } = req.body;
    const result = await runPythonScript('test_dns.py', [domain]);
    
    res.json({
      success: true,
      component: 'dns',
      domain: domain,
      result: result
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      component: 'dns'
    });
  }
});

app.post('/api/test/smtp', async (req, res) => {
  try {
    const { email } = req.body;
    const result = await runPythonScript('test_smtp.py', [email]);
    
    res.json({
      success: true,
      component: 'smtp',
      email: email,
      result: result
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      component: 'smtp'
    });
  }
});

app.post('/api/test/api', async (req, res) => {
  try {
    const { email, provider, apiKey } = req.body;
    const result = await runPythonScript('test_api.py', [email, provider, apiKey]);
    
    res.json({
      success: true,
      component: 'api',
      email: email,
      provider: provider,
      result: result
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      component: 'api'
    });
  }
});

// Performance benchmark
app.post('/api/benchmark', async (req, res) => {
  try {
    const { 
      emailCount = 10, 
      mode = 'standard',
      iterations = 3
    } = req.body;
    
    const result = await runPythonScript('benchmark.py', [
      emailCount.toString(),
      '--mode', mode,
      '--iterations', iterations.toString()
    ]);
    
    res.json({
      success: true,
      benchmark: result,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      test: 'benchmark'
    });
  }
});

// =============================================================================
// WEBSOCKET HANDLERS
// =============================================================================

io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);
  
  // Real-time email validation
  socket.on('validate-realtime', async (data) => {
    try {
      const { email, mode } = data;
      
      // Send progress updates
      socket.emit('validation-progress', { stage: 'starting', email });
      
      const result = await runPythonScript(`${mode}_validation.py`, [email]);
      
      socket.emit('validation-complete', {
        success: true,
        email,
        mode,
        result
      });
      
    } catch (error) {
      socket.emit('validation-error', {
        success: false,
        email: data.email,
        error: error.message
      });
    }
  });
  
  // Live performance monitoring
  socket.on('start-monitoring', () => {
    const interval = setInterval(async () => {
      try {
        const stats = await runPythonScript('get_stats.py', []);
        socket.emit('stats-update', stats);
      } catch (error) {
        console.error('Stats update failed:', error);
      }
    }, 5000);
    
    socket.on('disconnect', () => {
      clearInterval(interval);
    });
  });
  
  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});

// =============================================================================
// WEB INTERFACE ROUTES
// =============================================================================

// Main dashboard
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Component testing pages
app.get('/dns-test', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'dns-test.html'));
});

app.get('/smtp-test', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'smtp-test.html'));
});

app.get('/api-test', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'api-test.html'));
});

app.get('/hybrid-test', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'hybrid-test.html'));
});

app.get('/behavioral-test', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'behavioral-test.html'));
});

app.get('/benchmark', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'benchmark.html'));
});

// =============================================================================
// UTILITY FUNCTIONS
// =============================================================================

async function runPythonScript(scriptName, args = []) {
  return new Promise((resolve, reject) => {
    const options = {
      mode: 'text',
      pythonPath: PYTHON_PATH,
      pythonOptions: ['-u'], // Unbuffered stdout
      scriptPath: PYIDVERIFY_PATH,
      args: args
    };
    
    PythonShell.run(scriptName, options, (err, results) => {
      if (err) {
        reject(err);
      } else {
        try {
          // Try to parse as JSON, fall back to raw text
          const result = results && results.length > 0 ? 
            JSON.parse(results[results.length - 1]) : null;
          resolve(result);
        } catch (parseError) {
          // If JSON parsing fails, return raw results
          resolve(results);
        }
      }
    });
  });
}

// =============================================================================
// ERROR HANDLING
// =============================================================================

app.use((err, req, res, next) => {
  console.error('Error:', err);
  res.status(500).json({
    success: false,
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? err.message : undefined
  });
});

app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: 'Route not found',
    path: req.path
  });
});

// =============================================================================
// SERVER STARTUP
// =============================================================================

server.listen(PORT, () => {
  console.log(`
╔══════════════════════════════════════════════════════════════════════════════╗
║                PyIDVerify Email Verification Showcase Server                 ║
║                                                                              ║
║  🌐 Server running at: http://localhost:${PORT}                              ║
║  📊 Dashboard: http://localhost:${PORT}                                      ║
║  🔧 API Base: http://localhost:${PORT}/api                                   ║
║  📡 WebSocket: ws://localhost:${PORT}                                        ║
║                                                                              ║
║  Available Endpoints:                                                        ║
║    • POST /api/validate/basic        - Basic format validation              ║
║    • POST /api/validate/standard     - Standard DNS validation              ║
║    • POST /api/validate/thorough     - Thorough SMTP/API validation         ║
║    • POST /api/validate/comprehensive - Comprehensive hybrid validation     ║
║    • POST /api/validate/behavioral   - Behavioral workflow validation       ║
║    • POST /api/validate/batch        - Batch email validation               ║
║    • POST /api/test/dns              - DNS component testing                ║
║    • POST /api/test/smtp             - SMTP component testing               ║
║    • POST /api/test/api              - API component testing                ║
║    • POST /api/benchmark             - Performance benchmarking             ║
║                                                                              ║
║  🎯 Ready for email verification testing!                                   ║
╚══════════════════════════════════════════════════════════════════════════════╝
  `);
});

process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('Process terminated');
  });
});
"""

# Package.json for the Node.js server
PACKAGE_JSON = """{
  "name": "pyidverify-email-verification-showcase",
  "version": "1.0.0",
  "description": "Web server showcasing PyIDVerify Enhanced Email Verification capabilities",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \\"No tests specified\\" && exit 1"
  },
  "keywords": [
    "email",
    "verification",
    "validation",
    "pyidverify",
    "showcase",
    "demo",
    "api"
  ],
  "author": "PyIDVerify Team",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "body-parser": "^1.20.2",
    "multer": "^1.4.5",
    "python-shell": "^3.0.1",
    "socket.io": "^4.7.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  },
  "engines": {
    "node": ">=14.0.0",
    "npm": ">=6.0.0"
  }
}"""

# HTML Dashboard Template
HTML_DASHBOARD = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PyIDVerify Email Verification Showcase</title>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .header h1 {
            color: #4a5568;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        
        .header p {
            color: #718096;
            font-size: 1.1em;
        }
        
        .verification-modes {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .mode-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .mode-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.15);
        }
        
        .mode-card h3 {
            color: #4a5568;
            margin-bottom: 15px;
            font-size: 1.3em;
        }
        
        .mode-card p {
            color: #718096;
            margin-bottom: 20px;
            line-height: 1.5;
        }
        
        .email-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 14px;
            margin-bottom: 15px;
            transition: border-color 0.3s ease;
        }
        
        .email-input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .btn {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .results {
            margin-top: 20px;
            padding: 15px;
            background: #f7fafc;
            border-radius: 8px;
            border-left: 4px solid #667eea;
            display: none;
        }
        
        .results.show {
            display: block;
        }
        
        .results.success {
            border-left-color: #48bb78;
            background: #f0fff4;
        }
        
        .results.error {
            border-left-color: #f56565;
            background: #fffafa;
        }
        
        .component-tests {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .component-tests h2 {
            color: #4a5568;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .component-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }
        
        .component-btn {
            padding: 15px;
            background: #f7fafc;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            text-decoration: none;
            color: #4a5568;
            text-align: center;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .component-btn:hover {
            background: #667eea;
            color: white;
            transform: translateY(-2px);
        }
        
        .stats {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .stats h2 {
            color: #4a5568;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }
        
        .stat-item {
            text-align: center;
            padding: 15px;
            background: #f7fafc;
            border-radius: 8px;
        }
        
        .stat-value {
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
        }
        
        .stat-label {
            color: #718096;
            font-size: 0.9em;
            margin-top: 5px;
        }
        
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: bold;
            margin-left: 10px;
        }
        
        .badge.valid {
            background: #c6f6d5;
            color: #2d5016;
        }
        
        .badge.invalid {
            background: #fed7d7;
            color: #742a2a;
        }
        
        .badge.uncertain {
            background: #faf089;
            color: #744210;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔍 PyIDVerify Email Verification</h1>
            <p>Comprehensive email validation and verification showcase</p>
        </div>
        
        <div class="verification-modes">
            <div class="mode-card">
                <h3>🔤 Basic Validation</h3>
                <p>Format validation only - fast and lightweight</p>
                <input type="email" class="email-input" id="basic-email" placeholder="Enter email address...">
                <button class="btn btn-primary" onclick="validateEmail('basic')">Validate Basic</button>
                <div class="results" id="basic-results"></div>
            </div>
            
            <div class="mode-card">
                <h3>🌐 Standard Validation</h3>
                <p>Format + DNS validation with domain checking</p>
                <input type="email" class="email-input" id="standard-email" placeholder="Enter email address...">
                <button class="btn btn-primary" onclick="validateEmail('standard')">Validate Standard</button>
                <div class="results" id="standard-results"></div>
            </div>
            
            <div class="mode-card">
                <h3>🔍 Thorough Validation</h3>
                <p>Includes SMTP/API verification for existence</p>
                <input type="email" class="email-input" id="thorough-email" placeholder="Enter email address...">
                <input type="text" class="email-input" id="thorough-api-key" placeholder="API Key (optional)">
                <button class="btn btn-primary" onclick="validateEmail('thorough')">Validate Thorough</button>
                <div class="results" id="thorough-results"></div>
            </div>
            
            <div class="mode-card">
                <h3>🎯 Comprehensive</h3>
                <p>Hybrid verification with intelligent strategies</p>
                <input type="email" class="email-input" id="comprehensive-email" placeholder="Enter email address...">
                <select class="email-input" id="comprehensive-strategy">
                    <option value="balanced">Balanced Strategy</option>
                    <option value="cost_optimized">Cost Optimized</option>
                    <option value="accuracy_focused">Accuracy Focused</option>
                    <option value="speed_optimized">Speed Optimized</option>
                </select>
                <button class="btn btn-primary" onclick="validateEmail('comprehensive')">Validate Comprehensive</button>
                <div class="results" id="comprehensive-results"></div>
            </div>
            
            <div class="mode-card">
                <h3>👤 Behavioral Validation</h3>
                <p>User interaction workflows and confirmation</p>
                <input type="email" class="email-input" id="behavioral-email" placeholder="Enter email address...">
                <select class="email-input" id="behavioral-workflow">
                    <option value="email_confirmation">Email Confirmation</option>
                    <option value="double_optin">Double Opt-in</option>
                    <option value="engagement_tracking">Engagement Tracking</option>
                </select>
                <button class="btn btn-primary" onclick="validateEmail('behavioral')">Start Behavioral</button>
                <div class="results" id="behavioral-results"></div>
            </div>
            
            <div class="mode-card">
                <h3>📊 Batch Validation</h3>
                <p>Validate multiple emails simultaneously</p>
                <textarea class="email-input" id="batch-emails" placeholder="Enter emails (one per line)..." rows="3"></textarea>
                <button class="btn btn-primary" onclick="validateBatch()">Validate Batch</button>
                <div class="results" id="batch-results"></div>
            </div>
        </div>
        
        <div class="component-tests">
            <h2>🔧 Component Testing</h2>
            <div class="component-grid">
                <a href="/dns-test" class="component-btn">🌐 DNS Testing</a>
                <a href="/smtp-test" class="component-btn">📧 SMTP Testing</a>
                <a href="/api-test" class="component-btn">🔌 API Testing</a>
                <a href="/hybrid-test" class="component-btn">🎯 Hybrid Testing</a>
                <a href="/behavioral-test" class="component-btn">👤 Behavioral Testing</a>
                <a href="/benchmark" class="component-btn">⚡ Performance Benchmark</a>
            </div>
        </div>
        
        <div class="stats">
            <h2>📈 Live Statistics</h2>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value" id="stat-total">0</div>
                    <div class="stat-label">Total Validations</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="stat-valid">0</div>
                    <div class="stat-label">Valid Emails</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="stat-invalid">0</div>
                    <div class="stat-label">Invalid Emails</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="stat-avg-time">0ms</div>
                    <div class="stat-label">Avg Response Time</div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Initialize Socket.IO
        const socket = io();
        
        // Statistics tracking
        let totalValidations = 0;
        let validEmails = 0;
        let invalidEmails = 0;
        let responseTimes = [];
        
        // Email validation function
        async function validateEmail(mode) {
            const emailInput = document.getElementById(`${mode}-email`);
            const resultsDiv = document.getElementById(`${mode}-results`);
            const email = emailInput.value.trim();
            
            if (!email) {
                showResults(resultsDiv, { success: false, error: 'Please enter an email address' }, 'error');
                return;
            }
            
            // Show loading state
            const button = event.target;
            const originalText = button.textContent;
            button.innerHTML = '<span class="loading"></span>Validating...';
            button.disabled = true;
            
            try {
                const startTime = Date.now();
                
                let requestData = { email };
                
                // Add mode-specific parameters
                if (mode === 'thorough') {
                    const apiKey = document.getElementById('thorough-api-key').value.trim();
                    if (apiKey) requestData.apiKey = apiKey;
                }
                
                if (mode === 'comprehensive') {
                    requestData.strategy = document.getElementById('comprehensive-strategy').value;
                }
                
                if (mode === 'behavioral') {
                    requestData.workflowType = document.getElementById('behavioral-workflow').value;
                }
                
                const response = await fetch(`/api/validate/${mode}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestData)
                });
                
                const result = await response.json();
                const endTime = Date.now();
                const responseTime = endTime - startTime;
                
                // Update statistics
                updateStatistics(result.success, responseTime);
                
                // Show results
                showResults(resultsDiv, result, result.success ? 'success' : 'error');
                
            } catch (error) {
                showResults(resultsDiv, { success: false, error: error.message }, 'error');
            } finally {
                // Reset button
                button.textContent = originalText;
                button.disabled = false;
            }
        }
        
        // Batch validation function
        async function validateBatch() {
            const emailsInput = document.getElementById('batch-emails');
            const resultsDiv = document.getElementById('batch-results');
            const emailsText = emailsInput.value.trim();
            
            if (!emailsText) {
                showResults(resultsDiv, { success: false, error: 'Please enter email addresses' }, 'error');
                return;
            }
            
            const emails = emailsText.split('\\n').map(e => e.trim()).filter(e => e);
            
            if (emails.length === 0) {
                showResults(resultsDiv, { success: false, error: 'Please enter valid email addresses' }, 'error');
                return;
            }
            
            // Show loading state
            const button = event.target;
            const originalText = button.textContent;
            button.innerHTML = '<span class="loading"></span>Validating Batch...';
            button.disabled = true;
            
            try {
                const startTime = Date.now();
                
                const response = await fetch('/api/validate/batch', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ emails, mode: 'standard' })
                });
                
                const result = await response.json();
                const endTime = Date.now();
                const responseTime = endTime - startTime;
                
                // Update statistics
                if (result.success && result.results) {
                    result.results.forEach(r => updateStatistics(r.is_valid, responseTime / emails.length));
                }
                
                // Show results
                showResults(resultsDiv, result, result.success ? 'success' : 'error');
                
            } catch (error) {
                showResults(resultsDiv, { success: false, error: error.message }, 'error');
            } finally {
                // Reset button
                button.textContent = originalText;
                button.disabled = false;
            }
        }
        
        // Show results function
        function showResults(resultsDiv, result, type) {
            resultsDiv.className = `results show ${type}`;
            
            if (result.success) {
                let html = '<h4>✅ Validation Successful</h4>';
                
                if (result.result) {
                    const r = result.result;
                    html += `
                        <p><strong>Email:</strong> ${result.email || 'N/A'}</p>
                        <p><strong>Valid:</strong> ${r.is_valid ? '✅' : '❌'}</p>
                        <p><strong>Confidence:</strong> ${(r.confidence * 100).toFixed(1)}%</p>
                    `;
                    
                    if (r.is_disposable) html += '<p>⚠️ Disposable email detected</p>';
                    if (r.is_role_account) html += '<p>👔 Role-based account</p>';
                    if (r.is_catch_all) html += '<p>📥 Catch-all domain</p>';
                    
                    if (r.methods_used && r.methods_used.length > 0) {
                        html += `<p><strong>Methods:</strong> ${r.methods_used.join(', ')}</p>`;
                    }
                    
                    if (r.warnings && r.warnings.length > 0) {
                        html += `<p><strong>Warnings:</strong> ${r.warnings.join(', ')}</p>`;
                    }
                }
                
                if (result.results && Array.isArray(result.results)) {
                    html += `<h4>Batch Results (${result.results.length} emails)</h4>`;
                    result.results.forEach((r, i) => {
                        const badge = r.is_valid ? 
                            '<span class="badge valid">Valid</span>' : 
                            '<span class="badge invalid">Invalid</span>';
                        html += `<p>${r.email} ${badge}</p>`;
                    });
                }
                
                resultsDiv.innerHTML = html;
            } else {
                resultsDiv.innerHTML = `
                    <h4>❌ Validation Failed</h4>
                    <p><strong>Error:</strong> ${result.error || 'Unknown error'}</p>
                `;
            }
        }
        
        // Update statistics
        function updateStatistics(isValid, responseTime) {
            totalValidations++;
            if (isValid) validEmails++;
            else invalidEmails++;
            responseTimes.push(responseTime);
            
            // Keep only last 100 response times
            if (responseTimes.length > 100) {
                responseTimes = responseTimes.slice(-100);
            }
            
            // Update display
            document.getElementById('stat-total').textContent = totalValidations;
            document.getElementById('stat-valid').textContent = validEmails;
            document.getElementById('stat-invalid').textContent = invalidEmails;
            
            const avgTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;
            document.getElementById('stat-avg-time').textContent = Math.round(avgTime) + 'ms';
        }
        
        // Real-time updates via WebSocket
        socket.on('connect', function() {
            console.log('Connected to server');
            socket.emit('start-monitoring');
        });
        
        socket.on('stats-update', function(stats) {
            // Update live statistics if provided by server
            if (stats) {
                console.log('Stats update:', stats);
            }
        });
        
        // Auto-focus first input
        document.getElementById('basic-email').focus();
    </script>
</body>
</html>"""

if __name__ == "__main__":
    print("PyIDVerify Email Verification - Node.js Web Server Documentation")
    print("=" * 80)
    print()
    print("This document contains the complete Node.js implementation for showcasing")
    print("the PyIDVerify Enhanced Email Verification system.")
    print()
    print("Components included:")
    print("- Express.js server with REST API")
    print("- WebSocket support for real-time validation") 
    print("- Complete web interface with interactive components")
    print("- Component testing pages")
    print("- Performance benchmarking")
    print("- Batch validation capabilities")
    print()
    print("To implement:")
    print("1. Create a new directory for the Node.js server")
    print("2. Save the server code as 'server.js'")
    print("3. Save the package.json configuration") 
    print("4. Save the HTML dashboard as 'public/index.html'")
    print("5. Create Python integration scripts")
    print("6. Install dependencies: npm install")
    print("7. Start server: npm run dev")
    print()
    print("The server will showcase all email verification capabilities")
    print("through an interactive web interface at http://localhost:3000")
